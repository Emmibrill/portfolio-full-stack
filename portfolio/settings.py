"""
Django settings for portfolio project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import environ  # Import environ package
import os




# Initialise environment variables
env = environ.Env(
    DEBUG=(bool, True),  # Default to True for development
    SECRET_KEY=(str, ''),  # Default to empty string, must be set in .env
    CLOUDINARY_CLOUD_NAME=(str, ''),    # Default to empty string, must be set in .env
    CLOUDINARY_API_KEY=(str, ''),       # Default to empty string, must be set in .env
    CLOUDINARY_API_SECRET=(str, ''),    # Default to empty string, must be set in .env
    DATABASE_URL=(str, ''),  # Default to empty string, must be set in .env
    EMAIL_BACKEND=(str, 'django.core.mail.backends.console.EmailBackend'),  # Default to console backend for development
    EMAIL_HOST=(str, 'localhost'),  # Default to localhost for development
)
environ.Env.read_env(os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env'))


# Email settings for real email backend
DEBUG = env.bool("DEBUG", default=True)

# Email Config (Development mode using local SMTP server or console backend)
EMAIL_BACKEND = env('EMAIL_BACKEND')
EMAIL_HOST = env.str("EMAIL_HOST")
EMAIL_PORT = env.int("EMAIL_PORT")
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=False)
EMAIL_HOST_USER = env.str("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env.str("EMAIL_HOST_PASSWORD")

# Contact email (for receiving messages from a contact form)
CONTACT_EMAIL = env.str("CONTACT_EMAIL", default=EMAIL_HOST_USER)
print("ðŸ“¦ EMAIL_BACKEND in use:", EMAIL_BACKEND)


from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')


# SECURITY WARNING: don't run with debug turned on in production!

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['127.0.0.1', 'localhost',])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'portfolioApp',  #portfolio app
    'portfolioAPI',  #portfolio API
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    # WhiteNoiseMiddleware is used to serve static files in production  
]

ROOT_URLCONF = 'portfolio.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],  # Directory for custom templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'portfolio.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration

if env("DATABASE_URL", default=None):
    DATABASES = {
        "default":  env.db(), # Uses DATABASE_URL (PostgreSQL in production)
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]  # Directory for static files during development
# STATIC_ROOT is used for collecting static files in production
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # Directory for collected static files

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
